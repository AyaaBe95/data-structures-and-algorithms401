/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package stack.and.queue;

import org.junit.Test;
import static org.junit.Assert.*;

public class LibraryTest {
    @Test
    public void testPushOneValue() {
        stack s = new stack();
        s.push(1);
        assertEquals("the Output", 1, s.peek());
    }

    @Test
    public void testPushMultiValue() {
        stack s = new stack();
        s.push(1);
        s.push(2);
        s.push(3);
        assertEquals("the Output", 3, s.peek());
    }

    @Test
    public void testPopValue() {
        stack s = new stack();
        s.push(1);
        s.push(2);
        s.push(3);
        assertEquals("the Output", 3, s.pop());
    }

    @Test
    public void testEmptyAfterPopValue() {
        stack s = new stack();
        s.push(1);
        s.push(2);
        s.push(3);
        s.pop();
        s.pop();
        s.pop();
        assertTrue("the Output", s.isEmpty());
    }

    @Test
    public void testPeek() {
        stack s = new stack();
        s.push(1);
        s.push(2);
        s.push(3);
        assertEquals("the Output", 3, s.peek());
    }

    @Test
    public void testEmpty() {
        stack s = new stack();
        assertTrue("the Output", s.isEmpty());
    }

    @Test public void testStackPeekEmptyStack() {
        stack classUnderTest = new stack();
        assertEquals("Calling peek on empty stack raises exception","java.lang.NullPointerException" ,classUnderTest.peek().toString());

    }

    @Test(expected = AssertionError.class)
    public void testPopEmptyStack() {
        stack s = new stack();
        assertEquals(new NullPointerException(), s.pop());
    }


    //queue

    @Test
    public void testEnqueueOneValue() {
        queue q = new queue();
        q.enqueue(1);
        assertEquals("the Output", 1, q.peek());
    }

    @Test
    public void testEnqueueMultiValue() {
        queue q = new queue();
        q.enqueue(1);
        q.enqueue(2);
        q.enqueue(3);
        assertEquals("the Output", 1, q.peek());
    }

    @Test
    public void testDequeueValue() {
        queue q = new queue();
        q.enqueue(1);
        q.enqueue(2);
        q.enqueue(3);
        assertEquals("the Output", "Node{value=1, next=null}", q.dequeue().toString());
    }

    @Test
    public void testPeekQueue() {
        queue q = new queue();
        q.enqueue(1);
        q.enqueue(2);
        q.enqueue(3);
        assertEquals("the Output", 1, q.peek());
    }

    @Test
    public void testEmptyAfterDequeueValue() {
        queue q = new queue();
        q.enqueue(1);
        q.enqueue(2);
        q.enqueue(3);
        q.dequeue();
        q.dequeue();
        q.dequeue();
        assertTrue("the Output", q.isEmpty());
    }

    @Test
    public void testEmptyQueue() {
        queue q = new queue();
        assertTrue("the Output", q.isEmpty());
    }



    @Test(expected = AssertionError.class)
    public void testQueuePeekEmptyQueue() {
        queue q = new queue();
        assertEquals(new NullPointerException(), q.peek());
    }

//    @Test(expected = NullPointerException.class)
//    public void testDequeueEmptyQueue() {
//        queue q = new queue();
//        assertEquals(new NullPointerException(), q.dequeue().toString());
//    }

    @Test public void testDequeueEmptyQueue() {
        queue classUnderTest = new queue();
        assertEquals(" exception","java.lang.NullPointerException" ,classUnderTest.peek().toString());
    }


}
